name: Deploy to Azure Kubernetes Service
'on':
  push:
    branches:
      - master
  workflow_dispatch:
      
env:
  Tag: echo "IMAGE_TAG=$(date +'%Y%m%d-%H%M%S')" >> $GITHUB_ENV
  AZURE_CONTAINER_REGISTRY: "acrdevsecopsuksouth"
  CONTAINER_NAME: "aks-devsecops-uk-south"
  AZ_RESOURCE_GROUP: "rg-devsecops-uk-south"
  AZ_AKS_CLUSTER: "webapps"
  APP_MANIFEST_DIR: manifest
  APP_NAME: webapp1
  AKS_APP_NAME: "webapp1"
  AKS_SERVICE: "webapp1"
  AKS_SERVICE_ACCOUNT: "webapp1-sa"
  AKS_NAMESPACE: "webapp"
  GITHUB_SHA: ${{ github.sha }}
jobs:
  test:
    name: Test
    runs-on: ubuntu-latest
    steps:
        - name: Checkout
          uses: actions/checkout@v4
        - name: npm install
          run: npm install
        - name: Run Tests
          run: echo "Running tests..."
  build:
    name: Build
    needs: test
    runs-on: ubuntu-latest
    defaults:
      run:
        shell: bash
    steps:
        - name: Checkout
          uses: actions/checkout@v4
        - name: Azure Login
          uses: azure/login@v1
          with:
            creds: '${{ secrets.AZURE_CREDENTIALS }}'

        - name: Get ACR name and login server (contains 'acrdevsecopsuksouth')
          id: get-acr
          run: |
            ACR_NAME=$(az acr list --query "[?contains(name, 'acrdevsecopsuksouth')].name" -o tsv)

            if [ -z "$ACR_NAME" ]; then
                echo "No ACR found containing 'acrdevsecopsuksouth'. Exiting."
            else
                ACR_SERVER=$(az acr show --name "$ACR_NAME" --query "loginServer" -o tsv)

                echo "ACR_SERVER=$ACR_SERVER" >> $GITHUB_ENV
                echo "ACR_NAME=$ACR_NAME" >> $GITHUB_ENV
                echo "ACR_NAME: $ACR_NAME"
                echo "ACR_SERVER: $ACR_SERVER"
            fi

        
        - name : Show ACR name and server
          run: |
              echo "ACR_NAME: $ACR_NAME"
              echo "ACR_SERVER: $ACR_SERVER"
              echo "ACR_NAME from env: ${{ env.ACR_NAME }}"
              echo "ACR_SERVER from env: ${{ env.ACR_SERVER }}"

        - name: Get ACR credentials and store as secrets
          if: ${{ env.ACR_NAME != '' }}
          id: get-acr-credentials
          run: |
            # Retrieve ACR username and password and store in GitHub secrets
            ACR_USERNAME=$(az acr credential show --name $ACR_NAME --query "username" -o tsv)
            ACR_PASSWORD=$(az acr credential show --name $ACR_NAME --query "passwords[0].value" -o tsv)


            echo "ACR_USERNAME=$ACR_USERNAME" >> "$GITHUB_ENV"
            echo "ACR_PASSWORD=$ACR_PASSWORD" >> "$GITHUB_ENV"
        - name: Docker Login
          if: ${{ env.ACR_NAME != '' }}
          uses: azure/docker-login@v1
          with:
                login-server: '${{ env.ACR_SERVER }}'
                username: '${{ env.ACR_USERNAME }}'
                password: '${{ env.ACR_PASSWORD }}'
        - name: Build and Push to ACR
          if: ${{ env.ACR_NAME != '' }}
          uses: docker/build-push-action@v2
          with:
                push: true
                tags: ${{ env.AZURE_CONTAINER_REGISTRY }}.azurecr.io/${{ env.CONTAINER_NAME }}:${{ env.GITHUB_SHA }} 
                file: Dockerfile
        - name : Container Scan
          if: ${{ env.ACR_NAME != '' }}
          uses: azure/container-scan@v0
          with:
            image-name: ${{ env.AZURE_CONTAINER_REGISTRY }}.azurecr.io/${{ env.CONTAINER_NAME }}:${{ env.GITHUB_SHA }} 
            username: ${{ env.ACR_USERNAME }}
            password: ${{ env.ACR_PASSWORD }}
  
  deploy:
    name: Deploy
    runs-on: ubuntu-latest
    needs: build
    steps:
      - name: Checkout
        uses: actions/checkout@v4

    

      - name: Azure Login
        uses: azure/login@v1
        with:
          creds: '${{ secrets.AZURE_CREDENTIALS }}'
      - name: Get AKS name that contains 'aks-devsecops-uk-south'
        id: get-aks
        run: |
          # Find AKS that contains 'aks-devsecops-uk-south' in the name
          AKS_NAME=$(az aks list --query "[?contains(name, 'aks-devsecops-uk-south')].name" -o tsv)
          echo "AKS_NAME=$AKS_NAME" >> $GITHUB_ENV
          echo "AKS_NAME: $AKS_NAME"


      - name: Get ACR name and login server (contains 'aks-devsecops-uk-south')
        id: get-acr
        run: |
          ACR_NAME=$(az acr list --query "[?contains(name, 'aks-devsecops-uk-south')].name" -o tsv)
          echo "::set-output name=ACR_NAME::$ACR_NAME"


      # - name: Update deployment file
      #   run: |
      #     sed -i "s|<ACR_NAME>|${{steps.get-acr.outputs.ACR_NAME}}|" manifest/deployment.yaml


      - name: Connect to cluster
        if: ${{ env.AKS_NAME != '' }}
        id: connect-to-cluster
        run: |
          az aks get-credentials --resource-group swiftcart-rg --name ${{env.AKS_NAME }}
      - name: Deploy or Update Deployment
        working-directory: ${{env.APP_MANIFEST_DIR}}
        env: 
          IMAGE_NAME: ${{ env.AZURE_CONTAINER_REGISTRY }}.azurecr.io/${{ env.CONTAINER_NAME }}:${{ env.GITHUB_SHA }}
        if: ${{ env.AKS_NAME != '' }}
        run: |
       
            envsubst < namespace.yaml | kubectl apply -f -
            envsubst < deployment.yaml | kubectl apply -f -
            kubectl get pods -o wide
            kubectl get svc -o wide 
            sleep 60
      
      - name: Notify Slack
        uses: ravsamhq/notify-slack-action@v2
        if: always()
        env:
          SLACK_WEBHOOK_URL: ${{ secrets.SLACK_CI_HOOK }}
        with:
          status: ${{ job.status }}
          notification_title: "{workflow}:{job} has {status_message}"
          message_format: "{emoji} *{workflow}:{job}* {status_message} in <{repo_url}|{repo}>"
          footer: "Logs <{run_url}|{job}>"
          notify_when: "failure,success" 