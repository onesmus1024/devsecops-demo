name: Deploy to Azure Kubernetes Service
'on':
  push:
    branches:
      - master
      
env:
  Tag: echo "IMAGE_TAG=$(date +'%Y%m%d-%H%M%S')" >> $GITHUB_ENV
jobs:
  test:
    name: Test
    runs-on: ubuntu-latest
    steps:
        - name: Checkout
          uses: actions/checkout@v4
        - name: npm install
          run: npm install
        - name: Run Tests
          run: echo "Running tests..."
  build:
    name: Build
    needs: test
    runs-on: ubuntu-latest
    defaults:
      run:
        shell: bash
    steps:
        - name: Checkout
          uses: actions/checkout@v4
        - name: Azure Login
          uses: azure/login@v1
          with:
            creds: '${{ secrets.AZURE_CREDENTIALS }}'

        - name: Get ACR name and login server (contains 'swiftcart')
          id: get-acr
          run: |
            ACR_NAME=$(az acr list --query "[?contains(name, 'swiftcart')].name" -o tsv)
            if [ -z "$ACR_NAME" ]; then
            echo "No ACR found containing 'swiftcart'. Exiting."
            exit 1
            fi
            ACR_SERVER=$(az acr show --name $ACR_NAME --query "loginServer" -o tsv)
            echo "ACR_SERVER=$ACR_SERVER" >> $GITHUB_ENV
            echo "ACR_NAME=$ACR_NAME" >> $GITHUB_ENV
            echo "ACR_NAME: $ACR_NAME"
            echo "ACR_SERVER: $ACR_SERVER"
        
        - name : Show ACR name and server
          run: |
              echo "ACR_NAME: $ACR_NAME"
              echo "ACR_SERVER: $ACR_SERVER"
              echo "ACR_NAME from env: ${{ env.ACR_NAME }}"
              echo "ACR_SERVER from env: ${{ env.ACR_SERVER }}"

        - name: Get ACR credentials and store as secrets
          if: ${{ env.ACR_NAME != '' }}
          id: get-acr-credentials
          run: |
            # Retrieve ACR username and password and store in GitHub secrets
            ACR_USERNAME=$(az acr credential show --name $ACR_NAME --query "username" -o tsv)
            ACR_PASSWORD=$(az acr credential show --name $ACR_NAME --query "passwords[0].value" -o tsv)


            echo "ACR_USERNAME=$ACR_USERNAME" >> "$GITHUB_ENV"
            echo "ACR_PASSWORD=$ACR_PASSWORD" >> "$GITHUB_ENV"
        - name: Docker Login
          if: ${{ env.ACR_NAME != '' }}
          uses: azure/docker-login@v1
          with:
                login-server: '${{ env.ACR_SERVER }}'
                username: '${{ env.ACR_USERNAME }}'
                password: '${{ env.ACR_PASSWORD }}'
        - name: Build and Push to ACR
          if: ${{ env.ACR_NAME != '' }}
          uses: docker/build-push-action@v2
          with:
                push: true
                tags: '${{ env.ACR_SERVER }}/swiftcart-frontend:latest'
                file: Dockerfile
        - name: Update deployment file
          run: |
         
            sed -i 's/<ACR_NAME>/${{ env.ACR_NAME }}/' manifest/deployment.yaml
   
  deploy:
    name: Deploy
    runs-on: ubuntu-latest
    needs: build
    steps:
      - name: Checkout
        uses: actions/checkout@v4

      - name: Azure Login
        uses: azure/login@v1
        with:
          creds: '${{ secrets.AZURE_CREDENTIALS }}'
      - name: Get AKS name that contains 'swiftcart'
        id: get-aks
        run: |
          # Find AKS that contains 'swiftcart' in the name
          AKS_NAME=$(az aks list --query "[?contains(name, 'Swiftcart')].name" -o tsv)
          echo "AKS_NAME=$AKS_NAME" >> $GITHUB_ENV

      - name: Connect to cluster
        if: ${{ env.AKS_NAME != '' }}
        id: connect-to-cluster
        run: |
          az aks get-credentials --resource-group swiftcart-rg --name ${{env.AKS_NAME }}
      - name: Deploy or Update Deployment
        if: ${{ env.AKS_NAME != '' }}
        run: |
          DEPLOYMENT_NAME="swiftcart-frontend" 

          NAMESPACE="default"


          if kubectl get deployment "$DEPLOYMENT_NAME" -n "$NAMESPACE"
          >/dev/null 2>&1; then
              echo "Deployment '$DEPLOYMENT_NAME' exists. Performing rollout restart..."
              kubectl rollout restart deployment/"$DEPLOYMENT_NAME" -n "$NAMESPACE"
          else
              echo "Deployment '$DEPLOYMENT_NAME' does not exist. Deploying..."
              kubectl apply -f ./manifest
          fi
